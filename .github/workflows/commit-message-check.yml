name: Commit Message Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  check-commit-messages:
    name: Check for AI Tool Attribution
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # Fetch full history to check all commits in PR
        fetch-depth: 0
    
    - name: Check commit messages for AI attribution
      run: |
        # Colors for output
        RED='\033[0;31m'
        YELLOW='\033[1;33m'
        GREEN='\033[0;32m'
        NC='\033[0m' # No Color
        
        # Define patterns to block (case insensitive)
        blocked_patterns=(
          "Generated with.*Claude"
          "Generated with.*ChatGPT" 
          "Generated with.*GPT"
          "Generated with.*AI"
          "Co-Authored-By: Claude"
          "Co-Authored-By: ChatGPT"
          "Co-Authored-By: GPT"
          "ü§ñ.*Generated"
          "ü§ñ.*Claude"
          "AI-generated"
          "AI generated"
          "Assisted by Claude"
          "Assisted by ChatGPT"
          "With help from Claude"
          "With help from ChatGPT"
          "claude.ai"
          "chatgpt.com"
        )
        
        # Get commits to check
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          # For PRs, check commits in the PR
          base_sha="${{ github.event.pull_request.base.sha }}"
          head_sha="${{ github.event.pull_request.head.sha }}"
          commits=$(git rev-list --reverse ${base_sha}..${head_sha})
        else
          # For push events, check the pushed commits
          if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
            commits=$(git rev-list --reverse ${{ github.event.before }}..${{ github.event.after }})
          else
            # First push to branch, check only the last commit
            commits="${{ github.event.after }}"
          fi
        fi
        
        found_violations=false
        violation_count=0
        
        echo -e "${GREEN}üîç Checking commit messages for AI tool attribution...${NC}"
        echo ""
        
        for commit in $commits; do
          commit_msg=$(git log --format="%B" -n 1 $commit)
          commit_subject=$(git log --format="%s" -n 1 $commit)
          
          # Check for blocked patterns
          violations_found=()
          for pattern in "${blocked_patterns[@]}"; do
            if echo "$commit_msg" | grep -qi "$pattern"; then
              violations_found+=("$pattern")
            fi
          done
          
          if [ ${#violations_found[@]} -gt 0 ]; then
            if [ "$found_violations" = false ]; then
              echo -e "${RED}‚ùå AI tool attribution detected in commit messages!${NC}"
              echo ""
              found_violations=true
            fi
            
            violation_count=$((violation_count + 1))
            echo -e "${RED}Commit: ${commit:0:8} - ${commit_subject}${NC}"
            for violation in "${violations_found[@]}"; do
              echo -e "${RED}  ‚ùå Matched pattern: $violation${NC}"
            done
            echo ""
          fi
        done
        
        if [ "$found_violations" = true ]; then
          echo -e "${YELLOW}Please remove AI tool attribution from commit messages.${NC}"
          echo -e "${YELLOW}Focus on describing what changed and why, not the tool used.${NC}"
          echo ""
          echo -e "${YELLOW}Good commit message examples:${NC}"
          echo -e "  ${YELLOW}‚Ä¢ Fix NATS health check endpoint${NC}"
          echo -e "  ${YELLOW}‚Ä¢ Update CI to use Go 1.24.3${NC}"
          echo -e "  ${YELLOW}‚Ä¢ Add error handling for connection timeouts${NC}"
          echo ""
          echo -e "${RED}Found $violation_count violation(s). Please amend your commit messages.${NC}"
          exit 1
        else
          echo -e "${GREEN}‚úÖ All commit messages look good!${NC}"
          exit 0
        fi