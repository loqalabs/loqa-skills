name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Weekly security scan on Sundays at 4 AM UTC
    - cron: '0 4 * * 0'
  workflow_dispatch:

env:
  GO_VERSION: '1.25.1'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  discover-skills:
    name: Discover Skills
    runs-on: ubuntu-latest
    outputs:
      go-skills: ${{ steps.discover.outputs.go-skills }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Discover Go skills
      id: discover
      run: |
        # Find all directories that contain go.mod files
        go_skills=$(find . -maxdepth 2 -name "go.mod" | \
                   sed 's|/go.mod$||' | sed 's|^\./||' | sort -u | \
                   jq -R -s -c 'split("\n")[:-1]')
        echo "go-skills=$go_skills" >> $GITHUB_OUTPUT
        echo "Found Go skills: $go_skills"

  go-security:
    name: Go Skills Security Analysis
    runs-on: ubuntu-latest
    needs: discover-skills
    if: fromJson(needs.discover-skills.outputs.go-skills)[0] != null
    
    strategy:
      matrix:
        skill: ${{ fromJson(needs.discover-skills.outputs.go-skills) }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies for skill
      run: |
        cd ${{ matrix.skill }}
        go mod download

    - name: Run gosec security scanner for skill
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec-${{ matrix.skill }}-results.sarif ./${{ matrix.skill }}/...'
      continue-on-error: true

    - name: Upload gosec scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'gosec-${{ matrix.skill }}-results.sarif'

    - name: Run govulncheck for skill
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        cd ${{ matrix.skill }}
        govulncheck ./...

  repository-security:
    name: Repository Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Scan skill manifests for security issues
      run: |
        echo "Scanning skill manifests for security concerns..."
        # Check for skills marked as sensitive
        find . -name "skill.yml" -exec grep -H "sensitive.*true" {} \; || echo "No sensitive skills found"
        # Check for overly broad permissions
        find . -name "skill.yml" -exec grep -H "permissions" {} \; || echo "No explicit permissions found"

  secret-scanning:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Run GitLeaks
      uses: gitleaks/gitleaks-action@v2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }} # Only required for Organizations
      with:
        args: --no-git --redact

    - name: Upload GitLeaks results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: results.sarif

  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    needs: discover-skills
    
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: go
        queries: +security-and-quality

    - name: Set up Go
      uses: actions/setup-go@v6
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build all Go skills for CodeQL
      run: |
        for skill in $(echo '${{ needs.discover-skills.outputs.go-skills }}' | jq -r '.[]'); do
          echo "Building skill: $skill"
          cd "$skill"
          go build -v ./... || echo "Build failed for $skill, continuing..."
          cd ..
        done

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [go-security, repository-security, secret-scanning, codeql]
    if: always()
    
    steps:
    - name: Security scan summary
      run: |
        echo "# Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Scan Status" >> $GITHUB_STEP_SUMMARY
        echo "- Go Skills Security: ${{ needs.go-security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Repository Security: ${{ needs.repository-security.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Secret Scanning: ${{ needs.secret-scanning.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- CodeQL: ${{ needs.codeql.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "ðŸ“Š View detailed results in the Security tab" >> $GITHUB_STEP_SUMMARY